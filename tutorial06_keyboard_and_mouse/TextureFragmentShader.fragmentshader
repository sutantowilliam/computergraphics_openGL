#version 330 core

// Interpolated values from the vertex shaders

uniform vec3 lightPos = vec3(1, 1, 1);
uniform vec3 viewPos;  

in vec2 UV;
in vec3 Normal;
in vec3 FragPos;  


// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main()
{
	vec3 textureColor = texture( myTextureSampler, UV ).rgb;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos); 

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * vec3(0.2, 0.2, 0.2);

    float ambientStrength = 0.5;
    vec3 ambient = ambientStrength * vec3(0, 0, 0.5);

	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm); 

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * vec3(0.5,0.5,0.5);  

    vec3 result = (textureColor+ ambient + diffuse + specular);
    color = vec4(result, 1.0);
}  
	// Output color = color of the texture at the specified UV
